bash <<'BUILD'
set -euo pipefail

APP_NAME="hanzi-srs-premium"
PKG="npm"

# --- Guard: Node 18+ ---
NODE_MAJOR="$(node -v | sed 's/v\([0-9]*\).*/\1/')"
if [ "${NODE_MAJOR:-0}" -lt 18 ]; then
  echo "❌ Node.js 18+ required. Current: $(node -v)"; exit 1
fi

# --- 1) Scaffold Next.js (TS + Tailwind + App Router) ---
npx --yes create-next-app@latest "$APP_NAME" \
  --ts --tailwind --eslint --app --src-dir --import-alias "@/*"

cd "$APP_NAME"

# --- 2) Install premium UX deps ---
$PKG i framer-motion lucide-react class-variance-authority tailwind-merge next-themes clsx react-wrap-balancer \
      @radix-ui/react-tooltip @radix-ui/react-dialog @radix-ui/react-separator @radix-ui/react-switch \
      stripe @stripe/stripe-js zod next-seo

$PKG i -D @tailwindcss/typography @tailwindcss/forms @tailwindcss/aspect-ratio \
          prettier prettier-plugin-tailwindcss eslint-plugin-tailwindcss

# --- 3) Tailwind config: tokens tuned for premium look ---
cat > tailwind.config.ts <<'EOF'
import type { Config } from "tailwindcss"

const config: Config = {
  darkMode: ["class"],
  content: [
    "./src/app/**/*.{ts,tsx,mdx}",
    "./src/components/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx,mdx}"
  ],
  theme: {
    container: { center: true, padding: "2rem", screens: { "2xl": "1280px" } },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: { DEFAULT: "hsl(var(--primary))", foreground: "hsl(var(--primary-foreground))" },
        secondary: { DEFAULT: "hsl(var(--secondary))", foreground: "hsl(var(--secondary-foreground))" },
        muted: { DEFAULT: "hsl(var(--muted))", foreground: "hsl(var(--muted-foreground))" },
        accent: { DEFAULT: "hsl(var(--accent))", foreground: "hsl(var(--accent-foreground))" },
        card: { DEFAULT: "hsl(var(--card))", foreground: "hsl(var(--card-foreground))" },
        destructive: { DEFAULT: "hsl(var(--destructive))", foreground: "hsl(var(--destructive-foreground))" },
        success: "hsl(var(--success))",
        warning: "hsl(var(--warning))"
      },
      borderRadius: {
        xl: "16px",
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)"
      },
      boxShadow: {
        soft: "0 12px 34px -14px rgba(0,0,0,.22)",
        glow: "0 0 0 1px hsl(var(--primary)/.3), 0 8px 30px -10px hsl(var(--primary)/.45)"
      },
      keyframes: {
        "fade-in": { "0%": { opacity: "0", transform: "translateY(6px)" }, "100%": { opacity: "1", transform: "translateY(0)" } },
        "float": { "0%": { transform: "translateY(0)" }, "50%": { transform: "translateY(-6px)" }, "100%": { transform: "translateY(0)" } },
        "shine": { "0%": { backgroundPosition: "200% 0" }, "100%": { backgroundPosition: "-200% 0" } }
      },
      animation: {
        "fade-in": "fade-in .4s ease-out both",
        "float": "float 6s ease-in-out infinite",
        "shine": "shine 2.6s linear infinite"
      }
    }
  },
  plugins: [require("@tailwindcss/typography"), require("@tailwindcss/forms"), require("@tailwindcss/aspect-ratio")]
}
export default config
EOF

# --- 4) Global styles + design tokens (light/dark), Stripe-like gradients ---
cat > src/app/globals.css <<'EOF'
@tailwind base; @tailwind components; @tailwind utilities;

/* Design tokens */
:root {
  --background: 0 0% 100%;
  --foreground: 224 71% 4%;
  --muted: 220 20% 97%;
  --muted-foreground: 221 16% 35%;
  --card: 0 0% 100%;
  --card-foreground: 224 71% 4%;
  --primary: 246 100% 60%; /* Indigo */
  --primary-foreground: 0 0% 100%;
  --secondary: 220 15% 96%;
  --secondary-foreground: 224 71% 4%;
  --accent: 160 84% 40%;   /* Jade */
  --accent-foreground: 0 0% 100%;
  --destructive: 0 84% 60%;
  --destructive-foreground: 0 0% 100%;
  --border: 220 14% 90%;
  --input: 220 14% 90%;
  --ring: 246 100% 60%;
  --success: 160 84% 40%;
  --warning: 35 93% 55%;
  --radius: 14px;
}
.dark {
  --background: 224 71% 4%;
  --foreground: 210 40% 98%;
  --muted: 220 13% 12%;
  --muted-foreground: 216 15% 66%;
  --card: 224 71% 5%;
  --card-foreground: 210 40% 98%;
  --primary: 248 93% 67%;
  --primary-foreground: 224 71% 4%;
  --secondary: 220 13% 12%;
  --secondary-foreground: 210 40% 98%;
  --accent: 160 84% 46%;
  --accent-foreground: 224 71% 4%;
  --destructive: 0 88% 66%;
  --border: 220 13% 18%;
  --input: 220 13% 18%;
  --ring: 248 93% 67%;
}

/* Base */
@layer base {
  * { @apply border-border; }
  html { scroll-behavior: smooth; }
  body { @apply bg-background text-foreground antialiased; }
}

/* Premium surfaces & effects */
.surface { @apply bg-white/70 dark:bg-white/5 backdrop-blur-xl border rounded-xl shadow-soft; }
.glass   { @apply bg-white/60 dark:bg-black/30 backdrop-blur-xl border; }
.hero-gradient {
  background:
    radial-gradient(1200px 600px at 10% 10%, hsl(var(--primary)/.14), transparent 60%),
    radial-gradient(1000px 500px at 85% -10%, hsl(var(--accent)/.12), transparent 70%),
    linear-gradient(180deg, hsl(var(--background)), hsl(var(--background)));
}
.shimmer {
  background-image: linear-gradient(90deg, transparent, hsl(var(--foreground)/.06), transparent);
  background-size: 200% 100%;
  animation: shine 2.4s linear infinite;
}
.focus-ring { @apply outline-none ring-2 ring-ring ring-offset-2 ring-offset-background rounded-md; }
EOF

# --- 5) Utilities ---
mkdir -p src/lib src/components/ui src/components/site src/components/providers src/app/(marketing) public/og

cat > src/lib/utils.ts <<'EOF'
import clsx, { type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) { return twMerge(clsx(inputs)) }
EOF

# --- 6) UI primitives ---
cat > src/components/ui/button.tsx <<'EOF'
"use client"
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-xl text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 ring-offset-background disabled:opacity-60 disabled:pointer-events-none",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:opacity-90 shadow-glow",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-muted",
        outline: "border bg-transparent hover:bg-muted",
        subtle: "bg-muted text-foreground hover:bg-muted/80",
        link: "underline underline-offset-4 hover:opacity-80"
      },
      size: { sm: "h-9 px-3", md: "h-11 px-4", lg: "h-12 px-6" }
    },
    defaultVariants: { variant: "default", size: "md" }
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => (
    <button ref={ref} className={cn(buttonVariants({ variant, size }), className)} {...props} />
  )
)
Button.displayName = "Button"
EOF

cat > src/components/ui/container.tsx <<'EOF'
import * as React from "react"
import { cn } from "@/lib/utils"
export function Container({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("container mx-auto px-4", className)} {...props} />
}
EOF

# Theme Provider + Toggle
cat > src/components/providers/theme-provider.tsx <<'EOF'
"use client"
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
export function ThemeProvider({ children }: { children: React.ReactNode }) {
  return (
    <NextThemesProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
      {children}
    </NextThemesProvider>
  )
}
EOF

cat > src/components/ui/theme-toggle.tsx <<'EOF'
"use client"
import { useTheme } from "next-themes"
import { Moon, Sun } from "lucide-react"
import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  const next = theme === "dark" ? "light" : "dark"
  return (
    <Button aria-label="Toggle theme" variant="ghost" size="sm" onClick={() => setTheme(next)}>
      {theme === "dark" ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
EOF

# --- 7) Site chrome (Header/Footer) ---
cat > src/components/site/header.tsx <<'EOF'
"use client"
import Link from "next/link"
import { useEffect, useState } from "react"
import { Container } from "@/components/ui/container"
import { Button } from "@/components/ui/button"
import { ThemeToggle } from "@/components/ui/theme-toggle"
import { Menu, X } from "lucide-react"
import { cn } from "@/lib/utils"

export function Header() {
  const [open, setOpen] = useState(false)
  const [scrolled, setScrolled] = useState(false)
  useEffect(() => {
    const onScroll = () => setScrolled(window.scrollY > 8)
    onScroll(); window.addEventListener("scroll", onScroll)
    return () => window.removeEventListener("scroll", onScroll)
  }, [])

  return (
    <header className={cn("sticky top-0 z-50 transition-all", scrolled ? "backdrop-blur-xl glass" : "bg-transparent")}>
      <Container className="flex h-16 items-center justify-between">
        <Link href="/" className="font-semibold text-lg tracking-tight">Hanzi SRS</Link>
        <nav className="hidden md:flex items-center gap-6 text-sm">
          <Link href="#how" className="hover:opacity-80">How it works</Link>
          <Link href="#features" className="hover:opacity-80">Features</Link>
          <Link href="/pricing" className="hover:opacity-80">Pricing</Link>
          <Link href="#faq" className="hover:opacity-80">FAQ</Link>
          <ThemeToggle />
          <Link href="/app" className="hover:opacity-80">Sign in</Link>
          <Button className="ml-2">Start free</Button>
        </nav>
        <button className="md:hidden p-2 rounded-md hover:bg-muted" onClick={() => setOpen(!open)} aria-label="Toggle menu">
          {open ? <X className="h-5 w-5"/> : <Menu className="h-5 w-5"/>}
        </button>
      </Container>
      <div className={cn("md:hidden border-t", open ? "block" : "hidden")}>
        <Container className="py-3 flex flex-col gap-3">
          <Link href="#how" onClick={() => setOpen(false)}>How it works</Link>
          <Link href="#features" onClick={() => setOpen(false)}>Features</Link>
          <Link href="/pricing" onClick={() => setOpen(false)}>Pricing</Link>
          <Link href="#faq" onClick={() => setOpen(false)}>FAQ</Link>
          <Link href="/app" onClick={() => setOpen(false)}>Sign in</Link>
          <Button onClick={() => setOpen(false)}>Start free</Button>
        </Container>
      </div>
    </header>
  )
}
EOF

cat > src/components/site/footer.tsx <<'EOF'
import { Container } from "@/components/ui/container"
export function Footer() {
  return (
    <footer className="border-t py-10">
      <Container className="flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-muted-foreground">
        <p>© {new Date().getFullYear()} Hanzi SRS. All rights reserved.</p>
        <nav className="flex gap-6">
          <a className="hover:opacity-80" href="/privacy">Privacy</a>
          <a className="hover:opacity-80" href="/terms">Terms</a>
          <a className="hover:opacity-80" href="/contact">Contact</a>
        </nav>
      </Container>
    </footer>
  )
}
EOF

# --- 8) Landing sections: Hero, SocialProof, Interactive Demo, Features, Testimonials, StickyCTA, FAQ ---
cat > src/components/site/hero.tsx <<'EOF'
"use client"
import { motion } from "framer-motion"
import Balancer from "react-wrap-balancer"
import { Container } from "@/components/ui/container"
import { Button } from "@/components/ui/button"

export function Hero() {
  return (
    <section className="relative overflow-hidden hero-gradient pb-16 pt-24 md:pt-32">
      <div aria-hidden className="pointer-events-none absolute inset-0" />
      <Container className="relative">
        <div className="max-w-3xl">
          <h1 className="text-4xl md:text-6xl font-semibold tracking-tight leading-tight">
            <Balancer>Stripe‑level polish meets WaniKani‑grade learning for <span className="text-primary">Hanzi</span>.</Balancer>
          </h1>
          <p className="mt-5 text-lg text-muted-foreground">
            Learn 2,000+ characters with vivid mnemonics, transparent SRS, and integrated context. Designed to be irresistible to use — and easy to stick with.
          </p>
          <div className="mt-8 flex flex-col sm:flex-row gap-3">
            <Button className="h-12 px-7">Start free</Button>
            <Button variant="outline" className="h-12 px-7">See the demo</Button>
          </div>
        </div>
        <motion.div
          initial={{ opacity: 0, y: 14 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: .6, delay: .15 }}
          className="mt-16 grid grid-cols-2 md:grid-cols-4 gap-4"
        >
          {Array.from({length:8}).map((_,i)=>(
            <motion.div key={i} whileHover={{ y: -4 }} className="surface p-6">
              <div className="text-3xl">字</div>
              <div className="mt-2 text-sm text-muted-foreground">Premium card surface</div>
            </motion.div>
          ))}
        </motion.div>
      </Container>
    </section>
  )
}
EOF

cat > src/components/site/social-proof.tsx <<'EOF'
import { Container } from "@/components/ui/container"
export function SocialProof() {
  return (
    <section className="py-10 border-t">
      <Container>
        <p className="text-center text-sm text-muted-foreground">Trusted by self‑learners, polyglots, and students worldwide</p>
        <div className="mt-6 grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4 items-center opacity-80">
          {["/og/logo1.svg","/og/logo2.svg","/og/logo3.svg","/og/logo4.svg","/og/logo5.svg","/og/logo6.svg"].map((src,i)=>(
            <div key={i} className="h-10 shimmer rounded-md" />
          ))}
        </div>
      </Container>
    </section>
  )
}
EOF

cat > src/components/site/review-demo.tsx <<'EOF'
"use client"
import { useMemo, useState } from "react"
import { Button } from "@/components/ui/button"

type DemoItem = { hanzi: string; pinyin: string; meaning: string; tone: number }
const ITEMS: DemoItem[] = [
  { hanzi: "好", pinyin: "hǎo", meaning: "good; well", tone: 3 },
  { hanzi: "学", pinyin: "xué", meaning: "to study", tone: 2 },
  { hanzi: "汉", pinyin: "hàn", meaning: "Han; Chinese", tone: 4 },
  { hanzi: "字", pinyin: "zì", meaning: "character", tone: 4 }
]

export function ReviewDemo() {
  const [i, setI] = useState(0)
  const item = useMemo(()=> ITEMS[i % ITEMS.length], [i])
  const [meaning, setMeaning] = useState("")
  const [reading, setReading] = useState("")
  const [result, setResult] = useState<"idle"|"correct"|"almost"|"wrong">("idle")

  function check() {
    const mOK = meaning.trim().toLowerCase().includes(item.meaning.split(";")[0])
    const rOK = reading.trim().toLowerCase().replace(/[1-5ˉˊˇˋ˙]/g,"") === item.pinyin.replace(/[1-5ˉˊˇˋ˙]/g,"")
    const toneOK = /[1-5]/.test(reading) ? reading.includes(String(item.tone)) : true
    const passed = mOK && rOK && toneOK
    const nearly = (mOK && rOK) || (mOK && toneOK) || (rOK && toneOK)
    setResult(passed ? "correct" : nearly ? "almost" : "wrong")
  }
  function next() { setMeaning(""); setReading(""); setResult("idle"); setI(i+1) }

  return (
    <div className="surface p-6">
      <div className="flex items-center justify-between">
        <div className="text-sm text-muted-foreground">Interactive demo</div>
        <div className="text-xs text-muted-foreground">No account needed</div>
      </div>
      <div className="mt-4 text-7xl md:text-8xl leading-none">{item.hanzi}</div>
      <div className="mt-2 text-sm text-muted-foreground">Type meaning and reading (e.g., hao3)</div>

      <div className="mt-4 grid sm:grid-cols-2 gap-3">
        <input className="h-11 px-3 rounded-lg border bg-background" placeholder="Meaning" value={meaning} onChange={e=>setMeaning(e.target.value)} />
        <input className="h-11 px-3 rounded-lg border bg-background" placeholder="Reading (pinyin + tone)" value={reading} onChange={e=>setReading(e.target.value)} />
      </div>

      <div className="mt-4 flex gap-3">
        <Button onClick={check}>Check</Button>
        <Button variant="outline" onClick={next}>Next</Button>
      </div>

      {result !== "idle" && (
        <div className="mt-4 rounded-lg p-3 text-sm"
          style={{ backgroundColor: result==="correct" ? "hsl(var(--success)/.12)" : result==="almost" ? "hsl(var(--warning)/.12)" : "hsl(var(--destructive)/.12)"}}>
          {result==="correct" && <>✅ Correct! <b>{item.hanzi}</b> = {item.meaning}; reading <b>{item.pinyin}</b></>}
          {result==="almost" && <>🟡 Almost there — check tone/reading.</>}
          {result==="wrong" && <>❌ Try again. Tip: {item.hanzi} is “{item.meaning.split(";")[0]}”, reading “{item.pinyin}”.</>}
        </div>
      )}
    </div>
  )
}
EOF

cat > src/components/site/feature-grid.tsx <<'EOF'
import { Container } from "@/components/ui/container"
import { CheckCircle, Keyboard, Layers3, Sparkles } from "lucide-react"

const FEATS = [
  { icon: Sparkles, title: "Vivid mnemonics", desc: "Short, funny stories encode meaning + reading + tone." },
  { icon: Keyboard, title: "Flow-state reviews", desc: "Keyboard-first. Hints, near-miss forgiveness, wrap-up." },
  { icon: Layers3, title: "Context that sticks", desc: "Sentences at hand; audio integrated into learning loops." },
  { icon: CheckCircle, title: "Transparent SRS", desc: "Know what’s due and why. Pacing that fits your life." }
]

export function FeatureGrid() {
  return (
    <section id="features" className="py-20">
      <Container>
        <h2 className="text-3xl md:text-4xl font-semibold tracking-tight">Crafted to convert effort into mastery</h2>
        <p className="mt-3 text-muted-foreground max-w-2xl">Polished interactions and humane guardrails keep you engaged long enough to win.</p>
        <div className="mt-10 grid sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {FEATS.map(({icon:Icon,title,desc})=>(
            <div key={title} className="surface p-6">
              <Icon className="h-6 w-6 text-primary" />
              <h3 className="mt-4 font-medium">{title}</h3>
              <p className="mt-2 text-sm text-muted-foreground">{desc}</p>
            </div>
          ))}
        </div>
      </Container>
    </section>
  )
}
EOF

cat > src/components/site/testimonials.tsx <<'EOF'
import { Container } from "@/components/ui/container"
export function Testimonials() {
  const quotes = [
    {q:"The only hanzi app I actually open daily.", a:"— Sam, UK"},
    {q:"The mnemonics are hilarious and they stick.", a:"— Lina, Canada"},
    {q:"Feels premium. Looks premium. Actually works.", a:"— Arjun, US"}
  ]
  return (
    <section className="py-20 border-t">
      <Container>
        <h2 className="text-3xl md:text-4xl font-semibold tracking-tight">What learners say</h2>
        <div className="mt-8 grid md:grid-cols-3 gap-6">
          {quotes.map((t,i)=>(
            <figure key={i} className="surface p-6">
              <blockquote className="text-lg">“{t.q}”</blockquote>
              <figcaption className="mt-4 text-sm text-muted-foreground">{t.a}</figcaption>
            </figure>
          ))}
        </div>
      </Container>
    </section>
  )
}
EOF

cat > src/components/site/sticky-cta.tsx <<'EOF'
"use client"
import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
export function StickyCTA() {
  const [visible, setVisible] = useState(false)
  useEffect(() => {
    const onScroll = () => setVisible(window.scrollY > 600)
    window.addEventListener("scroll", onScroll); onScroll()
    return () => window.removeEventListener("scroll", onScroll)
  }, [])
  if (!visible) return null
  return (
    <div className="fixed bottom-4 left-0 right-0 mx-auto max-w-xl surface p-3 shadow-glow flex items-center justify-between gap-3">
      <span className="text-sm">Ready to learn faster? Unlock the full course.</span>
      <Button>Get started</Button>
    </div>
  )
}
EOF

cat > src/components/site/faq.tsx <<'EOF'
import { Container } from "@/components/ui/container"
const QA = [
  {q:"Is there a free trial?", a:"Yes. Levels 1–3 are free with full features. Your reviews persist forever."},
  {q:"Do you support mobile?", a:"Yes. The site is mobile-perfect and installable as a PWA."},
  {q:"Simplified or Traditional?", a:"Simplified at launch. Traditional track planned next."},
  {q:"Can I cancel anytime?", a:"Yes. Manage your plan in the account portal."}
]
export function FAQ() {
  return (
    <section id="faq" className="py-20 border-t">
      <Container>
        <h2 className="text-3xl md:text-4xl font-semibold tracking-tight">FAQs</h2>
        <div className="mt-8 grid md:grid-cols-2 gap-6">
          {QA.map(({q,a})=>(
            <div key={q} className="surface p-6">
              <h3 className="font-medium">{q}</h3>
              <p className="mt-2 text-sm text-muted-foreground">{a}</p>
            </div>
          ))}
        </div>
      </Container>
    </section>
  )
}
EOF

# --- 9) Marketing pages: layout + home + pricing ---
cat > src/app/layout.tsx <<'EOF'
import type { Metadata } from "next"
import "./globals.css"
import { ThemeProvider } from "@/components/providers/theme-provider"
import { DefaultSeo } from "next-seo"

export const metadata: Metadata = {
  metadataBase: new URL("https://example.com"),
  title: { default: "Hanzi SRS — Learn Chinese Characters Faster", template: "%s · Hanzi SRS" },
  description: "Premium, mnemonic-powered SRS for mastering 2,000+ Chinese characters with context & audio.",
  icons: { icon: "/favicon.svg" }
}

const SEO = {
  title: "Hanzi SRS",
  description: "Stripe-level polish, WaniKani-like results.",
  openGraph: { type: "website", title: "Hanzi SRS", description: "Learn Hanzi faster with vivid mnemonics and premium UX." },
  twitter: { cardType: "summary_large_image" }
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body>
        <DefaultSeo {...SEO} />
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
EOF

cat > src/app/page.tsx <<'EOF'
import { Header } from "@/components/site/header"
import { Hero } from "@/components/site/hero"
import { SocialProof } from "@/components/site/social-proof"
import { ReviewDemo } from "@/components/site/review-demo"
import { FeatureGrid } from "@/components/site/feature-grid"
import { Testimonials } from "@/components/site/testimonials"
import { FAQ } from "@/components/site/faq"
import { Footer } from "@/components/site/footer"
import { StickyCTA } from "@/components/site/sticky-cta"

export default function Page() {
  return (
    <>
      <Header />
      <main>
        <Hero />
        <SocialProof />
        <section id="how" className="py-20">
          <div className="container mx-auto px-4 grid lg:grid-cols-2 gap-6">
            <div className="surface p-6">
              <h2 className="text-2xl font-semibold">See it in action</h2>
              <p className="mt-2 text-sm text-muted-foreground">Try a review card — no sign up required.</p>
              <div className="mt-6"><ReviewDemo /></div>
            </div>
            <div className="surface p-6">
              <h3 className="font-medium">Why this works</h3>
              <ul className="mt-3 text-sm text-muted-foreground list-disc pl-5 space-y-2">
                <li>Mnemonics make meaning & reading stick.</li>
                <li>Transparent SRS builds long-term memory.</li>
                <li>Context sentences turn recall into usage.</li>
              </ul>
            </div>
          </div>
        </section>
        <FeatureGrid />
        <Testimonials />
        <FAQ />
      </main>
      <Footer />
      <StickyCTA />
    </>
  )
}
EOF

# Pricing page with monthly/annual toggle and Stripe hooks
mkdir -p src/app/pricing
cat > src/app/pricing/page.tsx <<'EOF'
"use client"
import { useState } from "react"
import { Header } from "@/components/site/header"
import { Footer } from "@/components/site/footer"
import { Container } from "@/components/ui/container"
import { Button } from "@/components/ui/button"

export default function PricingPage() {
  const [annual, setAnnual] = useState(true)
  const monthly = 10
  const yearly = 95

  async function checkout(price: "monthly"|"yearly") {
    const res = await fetch("/api/checkout", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ plan: price })
    })
    if (!res.ok) { alert("Checkout not configured. Set STRIPE_* env vars."); return }
    const { url } = await res.json()
    window.location.href = url
  }

  return (
    <>
      <Header />
      <main className="py-20">
        <Container>
          <h1 className="text-4xl font-semibold tracking-tight">Simple pricing</h1>
          <p className="mt-3 text-muted-foreground max-w-2xl">Start free (Levels 1–3). Upgrade when ready.</p>

          <div className="mt-6 flex items-center gap-3">
            <span className={!annual ? "opacity-60" : ""}>Monthly</span>
            <label className="relative inline-flex cursor-pointer items-center">
              <input type="checkbox" className="sr-only peer" checked={annual} onChange={()=>setAnnual(!annual)} />
              <div className="w-12 h-7 bg-muted rounded-full peer-checked:bg-primary transition-colors" />
              <span className="absolute left-1 top-1 h-5 w-5 bg-white rounded-full transition-all peer-checked:translate-x-5" />
            </label>
            <span className={annual ? "opacity-60" : ""}>Annual</span>
          </div>

          <div className="mt-10 grid md:grid-cols-3 gap-6">
            <div className="surface p-6">
              <h3 className="text-lg font-medium">Free</h3>
              <p className="mt-1 text-sm text-muted-foreground">Levels 1–3 (~100 characters)</p>
              <p className="mt-6 text-3xl font-semibold">$0</p>
              <Button className="mt-6 w-full">Start</Button>
            </div>
            <div className="surface p-6 ring-1 ring-primary/30">
              <h3 className="text-lg font-medium">Monthly</h3>
              <p className="mt-1 text-sm text-muted-foreground">Full access. Cancel anytime.</p>
              <p className="mt-6 text-3xl font-semibold">${monthly}<span className="text-base text-muted-foreground">/mo</span></p>
              <Button className="mt-6 w-full" onClick={()=>checkout("monthly")}>Subscribe</Button>
            </div>
            <div className="surface p-6">
              <h3 className="text-lg font-medium">Yearly</h3>
              <p className="mt-1 text-sm text-muted-foreground">Best value.</p>
              <p className="mt-6 text-3xl font-semibold">${yearly}<span className="text-base text-muted-foreground">/yr</span></p>
              <Button className="mt-6 w-full" onClick={()=>checkout("yearly")}>Go yearly</Button>
            </div>
          </div>
        </Container>
      </main>
      <Footer />
    </>
  )
}
EOF

# --- 10) Stripe Checkout API routes (env-driven) ---
mkdir -p src/app/api/checkout src/app/api/stripe-webhook
cat > src/app/api/checkout/route.ts <<'EOF'
import { NextResponse } from "next/server"
import Stripe from "stripe"

const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY || ""
const STRIPE_PRICE_MONTHLY = process.env.STRIPE_PRICE_MONTHLY || ""
const STRIPE_PRICE_YEARLY = process.env.STRIPE_PRICE_YEARLY || ""
const STRIPE_SUCCESS_URL = process.env.STRIPE_SUCCESS_URL || "http://localhost:3000/pricing?success=1"
const STRIPE_CANCEL_URL = process.env.STRIPE_CANCEL_URL || "http://localhost:3000/pricing?canceled=1"

export async function POST(req: Request) {
  try {
    if (!STRIPE_SECRET_KEY || !STRIPE_PRICE_MONTHLY || !STRIPE_PRICE_YEARLY) {
      return new NextResponse("Stripe not configured", { status: 500 })
    }
    const { plan } = await req.json() as { plan: "monthly" | "yearly" }
    const price = plan === "monthly" ? STRIPE_PRICE_MONTHLY : STRIPE_PRICE_YEARLY
    const stripe = new Stripe(STRIPE_SECRET_KEY, { apiVersion: "2024-06-20" })
    const session = await stripe.checkout.sessions.create({
      mode: "subscription",
      line_items: [{ price, quantity: 1 }],
      success_url: STRIPE_SUCCESS_URL,
      cancel_url: STRIPE_CANCEL_URL
    })
    return NextResponse.json({ url: session.url })
  } catch (e) {
    return new NextResponse("Checkout error", { status: 500 })
  }
}
EOF

cat > src/app/api/stripe-webhook/route.ts <<'EOF'
import { headers } from "next/headers"
import { NextResponse } from "next/server"
import Stripe from "stripe"

const STRIPE_SECRET_KEY = process.env.STRIPE_SECRET_KEY || ""
const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || ""

export async function POST(req: Request) {
  if (!STRIPE_SECRET_KEY || !STRIPE_WEBHOOK_SECRET) return new NextResponse("Not configured", { status: 500 })
  const stripe = new Stripe(STRIPE_SECRET_KEY, { apiVersion: "2024-06-20" })
  const body = await req.arrayBuffer()
  const sig = headers().get("stripe-signature")
  try {
    const event = stripe.webhooks.constructEvent(Buffer.from(body), sig!, STRIPE_WEBHOOK_SECRET)
    // TODO: handle checkout.session.completed, invoice.paid, customer.subscription.updated, etc.
    return NextResponse.json({ received: true, type: event.type })
  } catch (err) {
    return new NextResponse("Webhook error", { status: 400 })
  }
}
EOF

# --- 11) Favicons & misc ---
cat > public/favicon.svg <<'EOF'
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
  <defs><linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
    <stop offset="0" stop-color="#635bff"/><stop offset="1" stop-color="#00c2a8"/></linearGradient></defs>
  <rect width="64" height="64" rx="12" fill="url(#g)"/>
  <text x="50%" y="54%" text-anchor="middle" font-size="34" font-family="system-ui, -apple-system, Segoe UI" fill="#fff">字</text>
</svg>
EOF

# --- 12) Prettier/ESLint polish ---
cat > .prettierrc <<'EOF'
{ "singleQuote": false, "semi": false, "plugins": ["prettier-plugin-tailwindcss"] }
EOF

node - <<'EOF'
const fs = require('fs')
const path = '.eslintrc.json'
if (fs.existsSync(path)) {
  const cfg = JSON.parse(fs.readFileSync(path,'utf8'))
  cfg.plugins = Array.from(new Set([...(cfg.plugins||[]), "tailwindcss"]))
  cfg.extends = Array.from(new Set([...(cfg.extends||[]), "plugin:tailwindcss/recommended"]))
  fs.writeFileSync(path, JSON.stringify(cfg,null,2))
}
EOF

# --- 13) Environment example ---
cat > .env.local.example <<'EOF'
# Stripe
STRIPE_SECRET_KEY=sk_test_***
STRIPE_PRICE_MONTHLY=price_***
STRIPE_PRICE_YEARLY=price_***
STRIPE_SUCCESS_URL=http://localhost:3000/pricing?success=1
STRIPE_CANCEL_URL=http://localhost:3000/pricing?canceled=1

# Optional: webhook secret for /api/stripe-webhook
STRIPE_WEBHOOK_SECRET=whsec_***
EOF

# --- 14) Package scripts ---
node - <<'EOF'
const fs = require('fs')
const pkg = JSON.parse(fs.readFileSync('package.json','utf8'))
pkg.scripts = {
  ...pkg.scripts,
  "format": "prettier --write .",
  "lint:strict": "eslint . --ext .ts,.tsx --max-warnings=0",
  "analyze:css": "tailwindcss -i ./src/app/globals.css -o /dev/null --minify"
}
fs.writeFileSync('package.json', JSON.stringify(pkg,null,2))
EOF

echo
echo "✅ Premium marketing site scaffolded."
echo "Next steps:"
echo "  cd $APP_NAME"
echo "  cp .env.local.example .env.local   # add Stripe keys or keep empty for now"
echo "  $PKG run dev"
echo
echo "— This build includes: interactive hero, social proof, SRS demo, testimonials, sticky CTA,"
echo "  pricing page with Stripe Checkout endpoints, dark/light themes, and accessible, animated UI."
BUILD